import { CSSResult, CSSResultArray, TemplateResult, LitElement, PropertyDeclaration, CSSResultGroup } from "lit";
export declare type PurePropertyDeclaration = {
    [key: string]: PropertyDeclaration;
};
export declare type PropDefinedPureArguments<TProps> = {
    styles?: CSSResultGroup;
    props?: (PurePropertyDeclaration | string)[];
    defaults?: TProps & DefaultObjectDefinition;
};
export declare type DefaultObjectDefinition = {
    [key: string]: unknown;
};
export declare type DefaultDefinedPureArguments<TProps> = {
    styles?: CSSResult | CSSResultArray;
    defaults?: TProps & DefaultObjectDefinition;
};
export declare type PureArguments<TProps> = PropDefinedPureArguments<TProps> | DefaultDefinedPureArguments<TProps>;
export declare type LitElementWithProps<TProps> = LitElement & TProps;
export declare type RenderFunction<TProps> = (element: LitElementWithProps<TProps>) => TemplateResult;
export declare type AsyncRenderFunction<TProps> = (element: LitElementWithProps<TProps>) => Promise<TemplateResult>;
export declare type RegisteredElements = {
    [elementName: string]: LitElementWithProps<any>;
};
//# sourceMappingURL=types.d.ts.map