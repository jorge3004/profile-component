"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const clone_1 = require("./clone");
describe("shallowClone", () => {
    it("should correctly not handle primitives", () => {
        expect((0, clone_1.shallowClone)("bla")).toBe("bla");
        expect((0, clone_1.shallowClone)(42)).toBe(42);
        expect((0, clone_1.shallowClone)(true)).toBe(true);
        expect((0, clone_1.shallowClone)(false)).toBe(false);
        expect((0, clone_1.shallowClone)(0)).toBe(0);
    });
    it("should correctly not handle dates because damn they are evil", () => {
        const date = new Date(Date.now());
        expect((0, clone_1.shallowClone)(date)).toBe(date);
    });
    it("should correctly not handle regexes because how would it", () => {
        const reg = /blablub/gi;
        expect((0, clone_1.shallowClone)(reg)).toBe(reg);
    });
    it("should not handle undefined and null objects", () => {
        expect((0, clone_1.shallowClone)(null)).toBe(null);
        expect((0, clone_1.shallowClone)(undefined)).toBe(undefined);
    });
    it("should shallow clone an object nicely", () => {
        const obj = { with: true, some: "fields" };
        expect((0, clone_1.shallowClone)(obj)).not.toBe(obj);
        expect((0, clone_1.shallowClone)(obj)).toEqual(obj);
    });
    it("should shallow clone an array nicely", () => {
        const obj = ["a", "b"];
        expect((0, clone_1.shallowClone)(obj)).not.toBe(obj);
        expect((0, clone_1.shallowClone)(obj)).toEqual(obj);
    });
});
//# sourceMappingURL=clone.test.js.map