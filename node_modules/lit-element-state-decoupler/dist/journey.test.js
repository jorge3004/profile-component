"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const state_1 = require("./state");
const reducer_1 = require("./reducer");
const exampleReducer = (_) => ({
    change: (payload) => Promise.resolve(payload)
});
describe("A lit element with reducers and states", () => {
    let litElement;
    beforeEach(() => {
        jest.resetAllMocks();
        litElement = {
            requestUpdate: () => {
                litElement.render();
                litElement.updated();
            },
            dispatchEvent: jest.fn(),
            updateComplete: Promise.resolve(),
            updated: jest.fn(),
            render: jest.fn(),
            onRender: (render) => __awaiter(void 0, void 0, void 0, function* () {
                litElement.render = () => {
                    render();
                };
            })
        };
    });
    it("should register the states/reducers correctly", () => __awaiter(void 0, void 0, void 0, function* () {
        let currentState = "";
        let currentReducerState = "";
        let triggerStateChange = (newValue) => console.log(newValue);
        let triggerReducerChange = (action, newValue) => Promise.resolve((console.log(action, newValue), "bla"));
        litElement.onRender(() => {
            const state = (0, state_1.useState)(litElement, "initial");
            currentState = state.get();
            triggerStateChange = state.set;
            const reducer = (0, reducer_1.useReducer)(litElement, exampleReducer, "initial");
            currentReducerState = reducer.get();
            triggerReducerChange = reducer.set;
        });
        litElement.requestUpdate();
        expect(currentReducerState).toBe("initial");
        expect(currentState).toBe("initial");
        // a change will trigger a re-render, so the value should be changed and kept
        triggerStateChange("lala");
        expect(currentState).toBe("lala");
        expect(currentReducerState).toBe("initial");
        yield triggerReducerChange("change", "tata");
        expect(currentState).toBe("lala");
        expect(currentReducerState).toBe("tata");
    }));
});
//# sourceMappingURL=journey.test.js.map