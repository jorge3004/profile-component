"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useState = void 0;
const clone_1 = require("./clone");
const decorator_1 = require("./decorator");
const useState = (element, defaultValue, options = {}) => {
    let state = (0, clone_1.shallowClone)(defaultValue);
    const subscribers = [() => __awaiter(void 0, void 0, void 0, function* () { return (element.requestUpdate(), yield element.updateComplete); })];
    const set = (update) => __awaiter(void 0, void 0, void 0, function* () {
        if (state === update)
            return;
        state = (0, clone_1.shallowClone)(update);
        for (const subscriber of subscribers) {
            yield subscriber(state);
        }
    });
    return (0, decorator_1.withState)(element, new class {
        set value(update) {
            set(update);
        }
        get value() { return state; }
        publish(update) { set(update); }
        set(update) {
            return __awaiter(this, void 0, void 0, function* () { yield set(update); });
        }
        subscribe(onChange) { subscribers.push(onChange); }
        inject(update) { state = update; }
        get() { return state; }
        getState() { return state; }
    }, options);
};
exports.useState = useState;
//# sourceMappingURL=state.js.map