"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const effect_1 = require("./effect");
const decorator_1 = require("./decorator");
describe("useEffect", () => {
    let litElement;
    beforeEach(() => {
        jest.resetAllMocks();
        litElement = {
            dispatchEvent: jest.fn(),
            requestUpdate: jest.fn(),
            updated: jest.fn()
        };
    });
    it("executes the effect the first time", () => {
        let observe = "";
        const spy = jest.fn();
        (0, effect_1.useEffect)(litElement, spy, [observe]);
        expect(spy).toBeCalledTimes(1);
    });
    it("runs the `once` convience method only once", () => {
        const spy = jest.fn();
        (0, effect_1.useOnce)(litElement, spy);
        (0, decorator_1.asUpdateableLitElement)(litElement).updated();
        (0, effect_1.useOnce)(litElement, spy);
        expect(spy).toBeCalledTimes(1);
    });
    it("does not execute the effect again if the observed elements doesn't change between updates", () => {
        let observe = "";
        const spy = jest.fn();
        (0, effect_1.useEffect)(litElement, spy, [observe]);
        (0, decorator_1.asUpdateableLitElement)(litElement).updated();
        (0, effect_1.useEffect)(litElement, spy, [observe]);
        expect(spy).toBeCalledTimes(1);
    });
    it("executes the effect every time one the observables change", () => {
        let observe = "";
        let other = {};
        const spy = jest.fn();
        (0, effect_1.useEffect)(litElement, spy, [observe, other]);
        expect(spy).toBeCalledTimes(1);
        (0, decorator_1.asUpdateableLitElement)(litElement).updated();
        observe = "bla";
        (0, effect_1.useEffect)(litElement, spy, [observe, other]);
        (0, decorator_1.asUpdateableLitElement)(litElement).updated();
        expect(spy).toBeCalledTimes(2);
        other = { observe };
        (0, effect_1.useEffect)(litElement, spy, [observe, other]);
        (0, decorator_1.asUpdateableLitElement)(litElement).updated();
        expect(spy).toBeCalledTimes(3);
    });
});
//# sourceMappingURL=effect.test.js.map